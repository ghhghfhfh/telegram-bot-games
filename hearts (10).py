import random
from telegram import Update
from telegram.ext import CallbackContext, CommandHandler
import os
import json
from typing import Dict, Any, Union

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
MAIN_ADMIN = "Mikilyt"  # –ì–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
USER_DATA_FILE = "user_relations.json"
ADMIN_DATA_FILE = "admin_data.json"

# –ö–æ–¥—ã –¥–æ—Å—Ç—É–ø–∞
ACCESS_CODES = {
    "7843": {"name": "girlfriend", "emoji": "üíñ", "title": "–î–µ–≤—É—à–∫–∞"},
    "9486": {"name": "sister", "emoji": "üë©‚Äç‚ù§Ô∏è‚Äçüë©", "title": "–°–µ—Å—Ç—Ä–∞"},
    "3642": {"name": "mother", "emoji": "üë©‚Äçüëß", "title": "–ú–∞–º–∞"},
    "5829": {"name": "friend", "emoji": "ü§ù", "title": "–ü–æ–¥—Ä—É–≥–∞"}
}

# –ë–∞–∑–æ–≤—ã–π —à–∞–±–ª–æ–Ω —Å–µ—Ä–¥–µ—á–∫–∞
HEART_TEMPLATE = """
_______{0}{0}{0}__{0}{0}{0}
_____{0}{0}{0}{0}{0}{0}{0}{0}{0}  
____{0}{0}{0}{0}{0}{0}{0}{0}{0}{0}
____{0}{0}{0}{0}{0}{0}{0}{0}{0}{0}
______{0}{0}{0}{0}{0}{0}{0}{0}  
_______-{0}{0}{0}{0}{0}{0}   
__________-{0}{0}{0}{0}
____________-{0}{0}
______________{0}
(\__/)  
(‚Ä¢„ÖÖ‚Ä¢)  
/ „ÄÄ „Å•{0}‚ô° {1}
"""

# –†–∞–∑–Ω—ã–µ —Ç–∏–ø—ã —Å–µ—Ä–¥–µ—á–µ–∫
HEART_TYPES = {
    "girlfriend": ["‚ù§Ô∏è", "üíñ", "üíú", "üíó", "üíì", "üíû"],
    "sister": ["üíô", "üíú", "üíñ", "üíó", "üíû"],
    "mother": ["‚ù§Ô∏è", "üíñ", "üß°", "üíõ"],
    "friend": ["üíö", "üíô", "üíú", "ü§ç"]
}

# –°–ª—É—á–∞–π–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∏
SIGNATURES = {
    "girlfriend": [
        "–õ—é–±–ª—é —Ç–µ–±—è –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –Ω–∞ —Å–≤–µ—Ç–µ!",
        "–¢—ã —Å–∞–º–∞—è –ª—É—á—à–∞—è!",
        "–ú–æ—è –ª—é–±–∏–º–∞—è!",
        "–î–ª—è —Ç–µ–±—è, –º–æ—è –ø–æ–ª–æ–≤–∏–Ω–∫–∞!",
        "–° –ª—é–±–æ–≤—å—é –æ—Ç –º–µ–Ω—è!"
    ],
    "sister": [
        "–î–µ—Ä–∂–∏, —Å–µ—Å—Ç—Ä—ë–Ω–∫–∞, —è —Å–¥–µ–ª–∞–ª —ç—Ç–æ –¥–ª—è —Ç–µ–±—è",
        "–õ–æ–≤–∏ –º–æ–∏ —Å–µ—Ä–¥–µ—á–∫–∏, —Å–µ—Å—Ç—Ä–∞!",
        "–°–µ—Ä–¥–µ—á–∫–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ–±—è!",
        "–î–ª—è —Å–∞–º–æ–π –ª—É—á—à–µ–π —Å–µ—Å—Ç—Ä—ã!",
        "–¢—ã –∑–∞—Å–ª—É–∂–∏–≤–∞–µ—à—å –≤—Å–µ —Å–µ—Ä–¥–µ—á–∫–∏ –º–∏—Ä–∞!"
    ],
    "mother": [
        "–õ—É—á—à–µ–π –º–∞–º–µ –Ω–∞ —Å–≤–µ—Ç–µ!",
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤—Å—ë, –º–∞–º–∞!",
        "–õ—é–±–ª—é —Ç–µ–±—è, –º–∞–º–æ—á–∫–∞!",
        "–î–ª—è —Å–∞–º–æ–π –¥–æ—Ä–æ–≥–æ–π!",
        "–¢—ã - —Å–∞–º–æ–µ –¥–æ—Ä–æ–≥–æ–µ, —á—Ç–æ —É –º–µ–Ω—è –µ—Å—Ç—å!"
    ],
    "friend": [
        "–õ—É—á—à–µ–π –ø–æ–¥—Ä—É–≥–µ!",
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –¥—Ä—É–∂–±—É!",
        "–î–ª—è —Å–∞–º–æ–π –≤–µ—Ä–Ω–æ–π –ø–æ–¥—Ä—É–≥–∏!",
        "–î—Ä—É–∑—å—è –Ω–∞–≤—Å–µ–≥–¥–∞!",
        "–¢—ã - —Å–∞–º–∞—è –ª—É—á—à–∞—è!"
    ]
}

# –¶–≤–µ—Ç–∞ –¥–ª—è HTML –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è
HEART_COLORS = [
    "#FF0000",  # –ö—Ä–∞—Å–Ω—ã–π
    "#FF69B4",  # –†–æ–∑–æ–≤—ã–π
    "#9370DB",  # –§–∏–æ–ª–µ—Ç–æ–≤—ã–π
    "#1E90FF",  # –ì–æ–ª—É–±–æ–π
    "#32CD32",  # –ó–µ–ª–µ–Ω—ã–π
    "#FFD700",  # –ñ–µ–ª—Ç—ã–π
    "#FF8C00",  # –û—Ä–∞–Ω–∂–µ–≤—ã–π
    "#FFFFFF",  # –ë–µ–ª—ã–π
    "#FF1493",  # –Ø—Ä–∫–æ-—Ä–æ–∑–æ–≤—ã–π
    "#FF4500",  # –û—Ä–∞–Ω–∂–µ–≤–æ-–∫—Ä–∞—Å–Ω—ã–π
    "#DA70D6"   # –û—Ä—Ö–∏–¥–µ—è
]

def load_data(filename: str) -> Dict[str, Any]:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON —Ñ–∞–π–ª–∞ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ–º —Ñ–æ—Ä–º–∞—Ç–∞"""
    if os.path.exists(filename):
        try:
            with open(filename, "r", encoding='utf-8') as f:
                data = json.load(f)
                # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Å—Ç–∞—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –≤ –Ω–æ–≤—ã–π
                new_data = {}
                for key, value in data.items():
                    if isinstance(value, str):  # –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç: "user_id": "relation"
                        new_data[key] = {"relation": value, "username": None}
                    else:  # –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç: "user_id": {"relation": "...", "username": "..."}
                        new_data[key] = value
                return new_data
        except (json.JSONDecodeError, IOError) as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
            return {}
    return {}

def save_data(data: Dict[str, Any], filename: str) -> bool:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ JSON —Ñ–∞–π–ª"""
    try:
        with open(filename, "w", encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
        return True
    except IOError as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False

def is_admin(username: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—Å–∫–∏–µ –ø—Ä–∞–≤–∞"""
    if not username:
        return False
    admin_data = load_data(ADMIN_DATA_FILE)
    return (username.lower() == MAIN_ADMIN.lower() or 
            username.lower() in [a.lower() for a in admin_data.get("admins", [])])

async def find_user_relation(user_id: str, username: str) -> Union[str, None]:
    """–ù–∞—Ö–æ–¥–∏—Ç –æ—Ç–Ω–æ—à–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID –∏–ª–∏ username"""
    user_data = load_data(USER_DATA_FILE)

    # 1. –ü–æ–∏—Å–∫ –ø–æ user_id
    if user_id in user_data:
        return user_data[user_id]["relation"]

    # 2. –ü–æ–∏—Å–∫ –ø–æ username (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if username:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –Ω–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ username
        for data in user_data.values():
            if data.get("username", "").lower() == username.lower():
                return data["relation"]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–∏ –≤–∏–¥–∞ "username_xxx"
        username_key = f"username_{username.lower()}"
        if username_key in user_data:
            return user_data[username_key]["relation"]

    return None

async def start_love(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /love"""
    user_id = str(update.effective_user.id)
    username = update.effective_user.username
    relation = await find_user_relation(user_id, username)

    if not relation:
        await update.message.reply_text("‚ùå –í–∞—à–∏ –æ—Ç–Ω–æ—à–µ–Ω–∏—è –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return

    if relation not in HEART_TYPES:
        await update.message.reply_text("‚ùå –í–∞—à —Ç–∏–ø –æ—Ç–Ω–æ—à–µ–Ω–∏–π –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return

    try:
        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Ç–∏–ø —Å–µ—Ä–¥–µ—á–∫–∞, –ø–æ–¥–ø–∏—Å—å –∏ —Ü–≤–µ—Ç
        heart_type = random.choice(HEART_TYPES[relation])
        signature = random.choice(SIGNATURES[relation])
        color = random.choice(HEART_COLORS)

        # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–¥–µ—á–∫–æ
        heart_art = HEART_TEMPLATE.format(heart_type, signature)

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ü–≤–µ—Ç–æ–º
        message = f'<pre style="color: {color};">{heart_art}</pre>'

        await update.message.reply_text(
            text=message,
            parse_mode='HTML'
        )
    except Exception as e:
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–µ—Ä–¥–µ—á–∫–∞.")

async def set_user_relation(update: Update, context: CallbackContext) -> None:
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ—Ç–Ω–æ—à–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not is_admin(update.message.from_user.username):
        await update.message.reply_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
        return

    if len(context.args) < 2:
        codes_list = "\n".join([f"{code} - {data['title']}" for code, data in ACCESS_CODES.items()])
        await update.message.reply_text(
            f"‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /setuser [user_id/username] [–∫–æ–¥]\n\n"
            f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–¥—ã:\n{codes_list}"
        )
        return

    user_identifier = context.args[0]
    code = context.args[1]

    if code not in ACCESS_CODES:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –æ—Ç–Ω–æ—à–µ–Ω–∏—è.")
        return

    relation = ACCESS_CODES[code]["name"]
    user_data = load_data(USER_DATA_FILE)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–ª—é—á –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è
    if user_identifier.isdigit():  # –≠—Ç–æ user_id
        storage_key = user_identifier
        username_to_store = None
    else:  # –≠—Ç–æ username
        storage_key = f"username_{user_identifier.lower()}"
        username_to_store = user_identifier

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
    user_data[storage_key] = {
        "relation": relation,
        "username": username_to_store
    }

    if save_data(user_data, USER_DATA_FILE):
        await update.message.reply_text(
            f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –æ—Ç–Ω–æ—à–µ–Ω–∏—è: {ACCESS_CODES[code]['title']} –¥–ª—è "
            f"{'@' + user_identifier if not user_identifier.isdigit() else user_identifier}"
        )
    else:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö.")

async def remove_user_relation(update: Update, context: CallbackContext) -> None:
    """–£–¥–∞–ª—è–µ—Ç –æ—Ç–Ω–æ—à–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not is_admin(update.message.from_user.username):
        await update.message.reply_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
        return

    if not context.args:
        await update.message.reply_text("‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /removeuser [user_id/username]")
        return

    user_identifier = context.args[0]
    user_data = load_data(USER_DATA_FILE)
    removed = False

    # –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ user_id –∏–ª–∏ username
    if user_identifier.isdigit():  # –≠—Ç–æ user_id
        if user_identifier in user_data:
            del user_data[user_identifier]
            removed = True
    else:  # –≠—Ç–æ username
        # –£–¥–∞–ª—è–µ–º –ø–æ username –≤ –¥–∞–Ω–Ω—ã—Ö
        for key, data in list(user_data.items()):
            if data.get("username", "").lower() == user_identifier.lower():
                del user_data[key]
                removed = True

        # –£–¥–∞–ª—è–µ–º –ø–æ –∫–ª—é—á—É username_xxx
        username_key = f"username_{user_identifier.lower()}"
        if username_key in user_data:
            del user_data[username_key]
            removed = True

    if removed:
        if save_data(user_data, USER_DATA_FILE):
            await update.message.reply_text(f"‚úÖ –û—Ç–Ω–æ—à–µ–Ω–∏—è –¥–ª—è {user_identifier} —É–¥–∞–ª–µ–Ω—ã.")
        else:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö.")
    else:
        await update.message.reply_text(f"‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_identifier} –Ω–µ –Ω–∞–π–¥–µ–Ω.")

async def admin_profile(update: Update, context: CallbackContext) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"""
    if not is_admin(update.message.from_user.username):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return

    codes_list = "\n".join([f"{code} - {data['title']}" for code, data in ACCESS_CODES.items()])
    message = (
        "üëë <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b> üëë\n\n"
        "<b>–ö–æ–º–∞–Ω–¥—ã:</b>\n"
        "/setuser [user_id/username] [–∫–æ–¥] - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ—Ç–Ω–æ—à–µ–Ω–∏—è\n"
        "/removeuser [user_id/username] - —É–¥–∞–ª–∏—Ç—å –æ—Ç–Ω–æ—à–µ–Ω–∏—è\n"
        "/love - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–µ—Ä–¥–µ—á–∫–æ\n\n"
        "<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–¥—ã:</b>\n"
        f"{codes_list}"
    )
    await update.message.reply_text(message, parse_mode='HTML')

async def my_info(update: Update, context: CallbackContext) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–∏—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö"""
    user_id = str(update.effective_user.id)
    username = update.effective_user.username
    relation = await find_user_relation(user_id, username)

    if relation:
        relation_title = next(
            (v["title"] for v in ACCESS_CODES.values() if v["name"] == relation),
            relation
        )
        await update.message.reply_text(f"‚ÑπÔ∏è –í–∞—à–∏ –æ—Ç–Ω–æ—à–µ–Ω–∏—è: {relation_title}")
    else:
        await update.message.reply_text("‚ùå –í–∞—à–∏ –æ—Ç–Ω–æ—à–µ–Ω–∏—è –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")

def setup_handlers(application):
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥"""
    application.add_handler(CommandHandler("love", start_love))
    application.add_handler(CommandHandler("setuser", set_user_relation))
    application.add_handler(CommandHandler("removeuser", remove_user_relation))
    application.add_handler(CommandHandler("helpa", admin_profile))
    application.add_handler(CommandHandler("myinfo", my_info))