import os
import logging
from hearts import setup_handlers
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputMediaPhoto
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackContext,
    CallbackQueryHandler,
    MessageHandler,
    filters
)
from my_tetris import Tetris
from flask import Flask, send_from_directory
import threading

# ===== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø =====
load_dotenv()  # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env

# ===== –ù–ê–°–¢–†–û–ô–ö–ê –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø =====
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# ===== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø =====
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
if not TOKEN:
    logger.error("–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ .env —Ñ–∞–π–ª")
    exit(1)

# –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∏–≥—Ä –≤ —Ç–µ—Ç—Ä–∏—Å
games = {}

# ===== FLASK SERVER –î–õ–Ø HTML-–§–ê–ô–õ–û–í =====
app = Flask(__name__)

@app.route('/')
def index():
    return "–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –¥–ª—è –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è HTML-—Ñ–∞–π–ª–æ–≤"

@app.route('/<path:filename>')
def serve_file(filename):
    try:
        return send_from_directory('.', filename)
    except FileNotFoundError:
        return "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω", 404

def run_flask():
    port = int(os.environ.get("PORT", 8080))
    logger.info(f"–ó–∞–ø—É—Å–∫ Flask –Ω–∞ –ø–æ—Ä—Ç—É: {port}")
    app.run(host='0.0.0.0', port=port)

# –ó–∞–ø—É—Å–∫–∞–µ–º Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
threading.Thread(target=run_flask, daemon=True).start()

# ===== –ì–ê–†–ê–ù–¢–ò–†–û–í–ê–ù–ù–û –†–ê–ë–û–ß–ò–ï –°–°–´–õ–ö–ò –ù–ê –ò–ì–†–´ =====
HEART_GAME_URL = "https://rawcdn.githack.com/ghhghfhfh/telegram-bot-games/refs/heads/main/hearts.html"
TETRIS_GAME_URL = "https://rawcdn.githack.com/ghhghfhfh/telegram-bot-games/refs/heads/main/tetris.html"

# ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î =====
async def start(update: Update, context: CallbackContext) -> None:
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –º–Ω–æ–≥–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –±–æ—Ç.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "/help - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É\n"
        "/tetris - –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É –≤ —Ç–µ—Ç—Ä–∏—Å\n"
        "/stop - –∑–∞–≤–µ—Ä—à–∏—Ç—å –∏–≥—Ä—É\n"
        "/heartgame - –æ—Ç–∫—Ä—ã—Ç—å –∏–≥—Ä—É —Å —Å–µ—Ä–¥–µ—á–∫–∞–º–∏\n"
        "/webtetris - –æ—Ç–∫—Ä—ã—Ç—å –≤–µ–±-–≤–µ—Ä—Å–∏—é —Ç–µ—Ç—Ä–∏—Å–∞\n"
        "/love - –ø–æ–ª—É—á–∏—Ç—å –∫—Ä–∞—Å–∏–≤–æ–µ —Å–µ—Ä–¥–µ—á–∫–æ"
    )

async def help_command(update: Update, context: CallbackContext) -> None:
    await update.message.reply_text(
        "üéÆ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:\n\n"
        "1. –ö–æ–º–∞–Ω–¥–∞ –ª—é–±–≤–∏:\n"
        "   /love - –ø–æ–ª—É—á–∏—Ç—å –∫—Ä–∞—Å–∏–≤–æ–µ —Å–µ—Ä–¥–µ—á–∫–æ\n\n"
        "2. –ò–≥—Ä–∞ –≤ —Ç–µ—Ç—Ä–∏—Å:\n"
        "   /tetris - –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É\n"
        "   /stop - –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ–∫—É—â—É—é –∏–≥—Ä—É\n"
        "3. HTML-–∏–≥—Ä—ã:\n"
        "   /heartgame - –æ—Ç–∫—Ä—ã—Ç—å –∏–≥—Ä—É —Å —Å–µ—Ä–¥–µ—á–∫–∞–º–∏\n"
        "   /webtetris - –æ—Ç–∫—Ä—ã—Ç—å –≤–µ–±-–≤–µ—Ä—Å–∏—é —Ç–µ—Ç—Ä–∏—Å–∞\n\n"
        "üéÆ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤ —Ç–µ—Ç—Ä–∏—Å–µ:\n"
        "‚Üê ‚Üí - –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —Ñ–∏–≥—É—Ä—ã\n"
        "‚Üì - —É—Å–∫–æ—Ä–∏—Ç—å –ø–∞–¥–µ–Ω–∏–µ\n"
        "‚Üª - –ø–æ–≤–æ—Ä–æ—Ç —Ñ–∏–≥—É—Ä—ã\n"
        "‚èèÔ∏è - –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ –ø–∞–¥–µ–Ω–∏–µ\n"
        "‚èØ - –ø–∞—É–∑–∞/–ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å"
    )

# ===== –û–¢–ü–†–ê–í–ö–ê –°–°–´–õ–û–ö –ù–ê HTML-–§–ê–ô–õ–´ =====
async def show_heart_game(update: Update, context: CallbackContext) -> None:
    try:
        await update.message.reply_text(
            f"üéÆ –ò–≥—Ä–∞ —Å —Å–µ—Ä–¥–µ—á–∫–∞–º–∏:\n{HEART_GAME_URL}",
            disable_web_page_preview=True
        )
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ hearts.html: {HEART_GAME_URL}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—Å—ã–ª–∫–∏: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—Å—ã–ª–∫–∏")

async def show_web_tetris(update: Update, context: CallbackContext) -> None:
    try:
        await update.message.reply_text(
            f"üéÆ –í–µ–±-–≤–µ—Ä—Å–∏—è —Ç–µ—Ç—Ä–∏—Å–∞:\n{TETRIS_GAME_URL}",
            disable_web_page_preview=True
        )
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ tetris.html: {TETRIS_GAME_URL}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—Å—ã–ª–∫–∏: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—Å—ã–ª–∫–∏")

# ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –¢–ï–¢–†–ò–°–ê =====
async def start_tetris(update: Update, context: CallbackContext) -> None:
    chat_id = update.effective_chat.id
    games[chat_id] = Tetris()
    await send_tetris_board(update, context)

async def stop_tetris(update: Update, context: CallbackContext) -> None:
    chat_id = update.effective_chat.id
    if chat_id in games:
        del games[chat_id]
        await update.message.reply_text("–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    else:
        await update.message.reply_text("–ê–∫—Ç–∏–≤–Ω–∞—è –∏–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

async def send_tetris_board(update: Update, context: CallbackContext, is_callback=False):
    chat_id = update.effective_chat.id

    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∏–≥—Ä—É, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if chat_id not in games:
        games[chat_id] = Tetris()

    tetris = games[chat_id]

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    keyboard = [
        [
            InlineKeyboardButton("‚Üê", callback_data="left"),
            InlineKeyboardButton("‚Üì", callback_data="down"),
            InlineKeyboardButton("‚Üí", callback_data="right")
        ],
        [
            InlineKeyboardButton("‚Üª –ü–æ–≤–æ—Ä–æ—Ç", callback_data="rotate"),
            InlineKeyboardButton("‚èèÔ∏è –ü–∞–¥–µ–Ω–∏–µ", callback_data="drop")
        ],
        [
            InlineKeyboardButton("‚èØ –ü–∞—É–∑–∞", callback_data="pause"),
            InlineKeyboardButton("üîÑ –ù–æ–≤–∞—è –∏–≥—Ä–∞", callback_data="new"),
            InlineKeyboardButton("‚ùå –í—ã—Ö–æ–¥", callback_data="stop")
        ]
    ]

    reply_markup = InlineKeyboardMarkup(keyboard)

    # –ü–æ–ª—É—á–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ —Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è
    board_img = tetris.get_board_image()
    text = tetris.get_state_text()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    if is_callback:
        query = update.callback_query
        await query.message.edit_media(
            media=InputMediaPhoto(media=board_img, caption=text),
            reply_markup=reply_markup
        )
        await query.answer()
    else:
        if 'tetris_message' in context.chat_data:
            try:
                await context.bot.delete_message(chat_id, context.chat_data['tetris_message'])
            except:
                pass

        message = await context.bot.send_photo(
            chat_id=chat_id,
            photo=board_img,
            caption=text,
            reply_markup=reply_markup
        )
        context.chat_data['tetris_message'] = message.message_id

async def button_handler(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    chat_id = query.message.chat_id
    data = query.data

    if chat_id not in games:
        await query.answer("–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞! –ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—É—é –∏–≥—Ä—É /tetris")
        return

    tetris = games[chat_id]

    if data == "left":
        tetris.move(-1, 0)
    elif data == "right":
        tetris.move(1, 0)
    elif data == "down":
        tetris.move(0, 1)
    elif data == "rotate":
        tetris.rotate_piece()
    elif data == "drop":
        while tetris.drop():
            pass
    elif data == "pause":
        tetris.paused = not tetris.paused
    elif data == "new":
        tetris.reset()
    elif data == "stop":
        del games[chat_id]
        await query.message.delete()
        await query.answer("–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        return

    await send_tetris_board(update, context, is_callback=True)

# ===== –ó–ê–ü–£–°–ö –ë–û–¢–ê =====
def main() -> None:
    application = Application.builder().token(TOKEN).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("tetris", start_tetris))
    application.add_handler(CommandHandler("stop", stop_tetris))
    application.add_handler(CommandHandler("heartgame", show_heart_game))
    application.add_handler(CommandHandler("webtetris", show_web_tetris))

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–∑ hearts.py
    setup_handlers(application)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫
    application.add_handler(CallbackQueryHandler(button_handler))

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç...")
    application.run_polling()

if __name__ == "__main__":
    main()
